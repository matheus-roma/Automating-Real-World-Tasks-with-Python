__all__=(
        'xml2TT',
        )
class xml2TT:
    '''xml to tuple tree, works with either pyrxp or lxml as backend parser'''
    def reset(self):
        klass = self.__class__
        if '__old_call__' in klass.__dict__:
            klass.__call__ = klass.__old_call__
            del klass.__old_call__
        if hasattr(self,'recordLocation'):
            del self.recordLocation
    def __setup__(self):
        if '__old_call__' in self.__class__.__dict__: return
        self.__class__.__old_call__ = self.__class__.__call__
        from reportlab.rl_config import xmlParser
        xmlParser = xmlParser.lower()
        if xmlParser.startswith('pyrxp'):
            try:
                import pyRXPU
            except ImportError:
                xmlParser = 'lxml'
            else:
                xmlParser = 'pyrxp'
                def __call__(self,src,**kwds):
                    return pyRXPU.Parser().parse(src,**kwds)
                __DTERROR__ = 'error: Error:'
                def xml2Attrs(self,xml):
                        return pyRXPU.Parser(
                            NoNoDTDWarning=1,
                            ExpandCharacterEntities=0,
                            ExpandGeneralEntities=0)(xml)[1]
                self.recordLocation = pyRXPU.recordLocation
        if xmlParser=='lxml':
            from rlextra.radxml.lxmltt import LxmlTT, ET
            def __call__(self,src,**kwds):
                eoCB = kwds.pop('eoCB',None)
                if eoCB:
                    class WrapEOCB(ET.Resolver):
                        def resolve(self, s, eid, context):
                            rs = eoCB(s)
                            return None if not rs or rs==s else self.resolve_string(rs[1],context)
                    kwds['resolver'] = WrapEOCB
                return LxmlTT(**kwds).ttFromSrc(src)
            __DTERROR__ = 'XMLSyntaxError:'
            def xml2Attrs(self,xml):
                return ET.fromstring(xml).attrib
        elif xmlParser!='pyrxp':
            raise ValueError('rl_config.xmlParser=%s has invalid value' % repr(xmlParser))
        self.__DTERROR__ = __DTERROR__
        self.xmlParser = xmlParser
        self.__class__.__call__ = __call__
        self.__class__.xml2Attrs = xml2Attrs

    def __call__(self,*args,**kwds):
        self.__setup__()
        return self.__class__.__call__(self,*args,**kwds)

    def __getattr__(self,a):
        if a in ('xmlParser', 'recordLocation', '__DTERROR__'):
            self.__setup__()
            return self.__dict__[a]
        raise AttributeError(f'{self.__class__.__name__} instance has no attribute {a!r}')
xml2TT=xml2TT()
